// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        String   @id @default(cuid())
  nome      String
  email     String
  telefone  String
  endereco  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  veiculos  Veiculo[]
  ordens    OrdemServico[]
  agendamentos Agendamento[]
  contasReceber ContaReceber[]

  @@unique([email, usuarioId])
  @@map("clientes")
}

model Veiculo {
  id          String   @id @default(cuid())
  marca       String
  modelo      String
  ano         Int
  placa       String
  cor         String?
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  clienteId String
  cliente   Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  ordens    OrdemServico[]
  agendamentos Agendamento[]

  @@unique([placa, usuarioId])
  @@map("veiculos")
}

model OrdemServico {
  id          String   @id @default(cuid())
  numero      String
  descricao   String
  status      StatusOrdem @default(ABERTA)
  prioridade  Prioridade @default(MEDIA)
  valorTotal  Decimal  @default(0)
  dataAbertura DateTime @default(now())
  dataFechamento DateTime?
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  clienteId String
  cliente   Cliente @relation(fields: [clienteId], references: [id])
  veiculoId String
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id])
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  itens     ItemOrdemServico[]
  movimentacoes MovimentacaoCaixa[]
  comissoes   Comissao[]

  @@unique([numero, usuarioId])
  @@map("ordens_servico")
}

model ItemOrdemServico {
  id       String @id @default(cuid())
  descricao String
  quantidade Int    @default(1)
  valorUnitario Decimal
  valorTotal   Decimal
  observacoes  String?

  // Relacionamentos
  ordemId String
  ordem   OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)

  @@map("itens_ordem_servico")
}

model Produto {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  codigo      String
  preco       Decimal
  quantidade  Int      @default(0)
  quantidadeMinima Int @default(0)
  categoria   String?
  fornecedor  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([codigo, usuarioId])
  @@map("produtos")
}

model Agendamento {
  id          String   @id @default(cuid())
  dataHora    DateTime
  descricao   String
  status      StatusAgendamento @default(AGENDADO)
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  clienteId String
  cliente   Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  veiculoId String
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id], onDelete: Cascade)
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("agendamentos")
}

enum StatusAgendamento {
  AGENDADO
  CONFIRMADO
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
  FALTOU
}

enum StatusOrdem {
  ABERTA
  EM_ANDAMENTO
  AGUARDANDO_PECAS
  FINALIZADA
  CANCELADA
}

enum Prioridade {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

// ===== SISTEMA FINANCEIRO =====

model Caixa {
  id          String   @id @default(cuid())
  dataAbertura DateTime @default(now())
  dataFechamento DateTime?
  valorInicial Decimal @default(0)
  valorFinal   Decimal?
  status      StatusCaixa @default(ABERTO)
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  movimentacoes MovimentacaoCaixa[]
  usuarioId    String
  usuario      Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("caixas")
}

model MovimentacaoCaixa {
  id          String   @id @default(cuid())
  tipo        TipoMovimentacao
  valor       Decimal
  descricao   String
  categoria   CategoriaMovimentacao
  dataHora    DateTime @default(now())
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  caixaId     String
  caixa       Caixa @relation(fields: [caixaId], references: [id], onDelete: Cascade)
  ordemId     String?
  ordem       OrdemServico? @relation(fields: [ordemId], references: [id], onDelete: SetNull)
  contaPagarId String?
  contaPagar   ContaPagar? @relation(fields: [contaPagarId], references: [id], onDelete: SetNull)
  contaReceberId String?
  contaReceber ContaReceber? @relation(fields: [contaReceberId], references: [id], onDelete: SetNull)

  @@map("movimentacoes_caixa")
}

model ContaPagar {
  id          String   @id @default(cuid())
  descricao   String
  valor       Decimal
  dataVencimento DateTime
  dataPagamento DateTime?
  status      StatusConta @default(PENDENTE)
  categoria   CategoriaConta
  fornecedor  String?
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  movimentacoes MovimentacaoCaixa[]

  @@map("contas_pagar")
}

model ContaReceber {
  id          String   @id @default(cuid())
  descricao   String
  valor       Decimal
  dataVencimento DateTime
  dataRecebimento DateTime?
  status      StatusConta @default(PENDENTE)
  categoria   CategoriaConta
  clienteId   String?
  cliente     Cliente? @relation(fields: [clienteId], references: [id], onDelete: SetNull)
  usuarioId   String
  usuario     Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  movimentacoes MovimentacaoCaixa[]

  @@map("contas_receber")
}

model Comissao {
  id          String   @id @default(cuid())
  funcionario String
  valor       Decimal
  percentual  Decimal
  dataCalculo DateTime @default(now())
  dataPagamento DateTime?
  status      StatusComissao @default(PENDENTE)
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  ordemId     String
  ordem       OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)
  usuarioId   String
  usuario     Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("comissoes")
}

// ===== SISTEMA DE ASSINATURAS STRIPE =====

model Subscription {
  id                    String   @id @default(cuid())
  plan                  String
  referenceId           String   @unique
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  status                String   @default("incomplete")
  periodStart           DateTime?
  periodEnd             DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  seats                 Int?
  trialStart            DateTime?
  trialEnd              DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("subscriptions")
}

model Usuario {
  id        String   @id @default(cuid())
  nome      String
  email     String   @unique
  senha     String
  telefone  String?
  avatar    String?
  role      Role     @default(USUARIO)
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Campos do Stripe
  stripeCustomerId String?   @unique

  // Relacionamentos
  clientes      Cliente[]
  veiculos      Veiculo[]
  ordens        OrdemServico[]
  produtos      Produto[]
  agendamentos  Agendamento[]
  contasPagar   ContaPagar[]
  contasReceber ContaReceber[]
  comissoes     Comissao[]
  caixas        Caixa[]
  sessoes       Sessao[]

  @@map("usuarios")
}

model Sessao {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  usuario Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessoes")
}

// Enums Financeiros
enum StatusCaixa {
  ABERTO
  FECHADO
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
}

enum CategoriaMovimentacao {
  VENDAS
  SERVICOS
  PAGAMENTOS
  RECEBIMENTOS
  DESPESAS
  INVESTIMENTOS
  OUTROS
}

enum StatusConta {
  PENDENTE
  PAGO
  VENCIDO
  CANCELADO
}

enum CategoriaConta {
  FORNECEDORES
  CLIENTES
  FUNCIONARIOS
  TAXAS
  IMPOSTOS
  MANUTENCAO
  OUTROS
}

enum StatusComissao {
  PENDENTE
  PAGO
  CANCELADO
}

enum Role {
  ADMIN
  GERENTE
  USUARIO
}